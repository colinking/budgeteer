/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.plaid.ExchangeTokenRequest', null, global);
goog.exportSymbol('proto.plaid.ExchangeTokenResponse', null, global);
goog.exportSymbol('proto.plaid.GetTransactionsRequest', null, global);
goog.exportSymbol('proto.plaid.GetTransactionsResponse', null, global);
goog.exportSymbol('proto.plaid.Transaction', null, global);
goog.exportSymbol('proto.plaid.Transaction.Currency', null, global);
goog.exportSymbol('proto.plaid.Transaction.Location', null, global);
goog.exportSymbol('proto.plaid.Transaction.PaymentMeta', null, global);
goog.exportSymbol('proto.plaid.Transaction.Type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plaid.ExchangeTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plaid.ExchangeTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.plaid.ExchangeTokenRequest.displayName = 'proto.plaid.ExchangeTokenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plaid.ExchangeTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plaid.ExchangeTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plaid.ExchangeTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.ExchangeTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plaid.ExchangeTokenRequest}
 */
proto.plaid.ExchangeTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plaid.ExchangeTokenRequest;
  return proto.plaid.ExchangeTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plaid.ExchangeTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plaid.ExchangeTokenRequest}
 */
proto.plaid.ExchangeTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plaid.ExchangeTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plaid.ExchangeTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plaid.ExchangeTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.ExchangeTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.plaid.ExchangeTokenRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.plaid.ExchangeTokenRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plaid.ExchangeTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plaid.ExchangeTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.plaid.ExchangeTokenResponse.displayName = 'proto.plaid.ExchangeTokenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plaid.ExchangeTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plaid.ExchangeTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plaid.ExchangeTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.ExchangeTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itemId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plaid.ExchangeTokenResponse}
 */
proto.plaid.ExchangeTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plaid.ExchangeTokenResponse;
  return proto.plaid.ExchangeTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plaid.ExchangeTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plaid.ExchangeTokenResponse}
 */
proto.plaid.ExchangeTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plaid.ExchangeTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plaid.ExchangeTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plaid.ExchangeTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.ExchangeTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string access_token = 1;
 * @return {string}
 */
proto.plaid.ExchangeTokenResponse.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.plaid.ExchangeTokenResponse.prototype.setAccessToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string item_id = 2;
 * @return {string}
 */
proto.plaid.ExchangeTokenResponse.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.plaid.ExchangeTokenResponse.prototype.setItemId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plaid.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plaid.Transaction.repeatedFields_, null);
};
goog.inherits(proto.plaid.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.plaid.Transaction.displayName = 'proto.plaid.Transaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plaid.Transaction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plaid.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.plaid.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plaid.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    categoryList: jspb.Message.getRepeatedField(msg, 3),
    categoryId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    merchantName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    amount: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    currencyType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    date: jspb.Message.getFieldWithDefault(msg, 9, ""),
    location: (f = msg.getLocation()) && proto.plaid.Transaction.Location.toObject(includeInstance, f),
    paymentMeta: (f = msg.getPaymentMeta()) && proto.plaid.Transaction.PaymentMeta.toObject(includeInstance, f),
    pending: jspb.Message.getFieldWithDefault(msg, 12, false),
    pendingTransactionId: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plaid.Transaction}
 */
proto.plaid.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plaid.Transaction;
  return proto.plaid.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plaid.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plaid.Transaction}
 */
proto.plaid.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCategory(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryId(value);
      break;
    case 5:
      var value = /** @type {!proto.plaid.Transaction.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMerchantName(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAmount(value);
      break;
    case 8:
      var value = /** @type {!proto.plaid.Transaction.Currency} */ (reader.readEnum());
      msg.setCurrencyType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 10:
      var value = new proto.plaid.Transaction.Location;
      reader.readMessage(value,proto.plaid.Transaction.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 11:
      var value = new proto.plaid.Transaction.PaymentMeta;
      reader.readMessage(value,proto.plaid.Transaction.PaymentMeta.deserializeBinaryFromReader);
      msg.setPaymentMeta(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPending(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPendingTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plaid.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plaid.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plaid.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCategoryList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getCategoryId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getMerchantName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getCurrencyType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.plaid.Transaction.Location.serializeBinaryToWriter
    );
  }
  f = message.getPaymentMeta();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.plaid.Transaction.PaymentMeta.serializeBinaryToWriter
    );
  }
  f = message.getPending();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getPendingTransactionId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.plaid.Transaction.Type = {
  TRANSACTION_TYPE_INVALID: 0,
  TRANSACTION_TYPE_UNRESOLVED: 1,
  TRANSACTION_TYPE_DIGITAL: 2,
  TRANSACTION_TYPE_PLACE: 3,
  TRANSACTION_TYPE_SPECIAL: 4
};

/**
 * @enum {number}
 */
proto.plaid.Transaction.Currency = {
  TRANSACTION_CURRENCY_INVALID: 0,
  TRANSACTION_CURRENCY_USD: 1,
  TRANSACTION_CURRENCY_CAD: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plaid.Transaction.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plaid.Transaction.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.plaid.Transaction.Location.displayName = 'proto.plaid.Transaction.Location';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plaid.Transaction.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.plaid.Transaction.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plaid.Transaction.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.Transaction.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    city: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lat: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    lon: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    state: jspb.Message.getFieldWithDefault(msg, 5, ""),
    storeNumber: jspb.Message.getFieldWithDefault(msg, 6, ""),
    zip: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plaid.Transaction.Location}
 */
proto.plaid.Transaction.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plaid.Transaction.Location;
  return proto.plaid.Transaction.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plaid.Transaction.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plaid.Transaction.Location}
 */
proto.plaid.Transaction.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLon(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoreNumber(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setZip(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plaid.Transaction.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plaid.Transaction.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plaid.Transaction.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.Transaction.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getLon();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStoreNumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getZip();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.plaid.Transaction.Location.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.plaid.Transaction.Location.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string city = 2;
 * @return {string}
 */
proto.plaid.Transaction.Location.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.plaid.Transaction.Location.prototype.setCity = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double lat = 3;
 * @return {number}
 */
proto.plaid.Transaction.Location.prototype.getLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.plaid.Transaction.Location.prototype.setLat = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double lon = 4;
 * @return {number}
 */
proto.plaid.Transaction.Location.prototype.getLon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.plaid.Transaction.Location.prototype.setLon = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string state = 5;
 * @return {string}
 */
proto.plaid.Transaction.Location.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.plaid.Transaction.Location.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string store_number = 6;
 * @return {string}
 */
proto.plaid.Transaction.Location.prototype.getStoreNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.plaid.Transaction.Location.prototype.setStoreNumber = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string zip = 7;
 * @return {string}
 */
proto.plaid.Transaction.Location.prototype.getZip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.plaid.Transaction.Location.prototype.setZip = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plaid.Transaction.PaymentMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plaid.Transaction.PaymentMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.plaid.Transaction.PaymentMeta.displayName = 'proto.plaid.Transaction.PaymentMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plaid.Transaction.PaymentMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.plaid.Transaction.PaymentMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plaid.Transaction.PaymentMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.Transaction.PaymentMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    byOrderOf: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payee: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    paymentMethod: jspb.Message.getFieldWithDefault(msg, 4, ""),
    paymentProcessor: jspb.Message.getFieldWithDefault(msg, 5, ""),
    ppdid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 7, ""),
    referenceNumber: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plaid.Transaction.PaymentMeta}
 */
proto.plaid.Transaction.PaymentMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plaid.Transaction.PaymentMeta;
  return proto.plaid.Transaction.PaymentMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plaid.Transaction.PaymentMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plaid.Transaction.PaymentMeta}
 */
proto.plaid.Transaction.PaymentMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setByOrderOf(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentMethod(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentProcessor(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPpdid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferenceNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plaid.Transaction.PaymentMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plaid.Transaction.PaymentMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plaid.Transaction.PaymentMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.Transaction.PaymentMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getByOrderOf();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayee();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPaymentMethod();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPaymentProcessor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPpdid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReferenceNumber();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string by_order_of = 1;
 * @return {string}
 */
proto.plaid.Transaction.PaymentMeta.prototype.getByOrderOf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.plaid.Transaction.PaymentMeta.prototype.setByOrderOf = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string payee = 2;
 * @return {string}
 */
proto.plaid.Transaction.PaymentMeta.prototype.getPayee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.plaid.Transaction.PaymentMeta.prototype.setPayee = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string payer = 3;
 * @return {string}
 */
proto.plaid.Transaction.PaymentMeta.prototype.getPayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.plaid.Transaction.PaymentMeta.prototype.setPayer = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string payment_method = 4;
 * @return {string}
 */
proto.plaid.Transaction.PaymentMeta.prototype.getPaymentMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.plaid.Transaction.PaymentMeta.prototype.setPaymentMethod = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string payment_processor = 5;
 * @return {string}
 */
proto.plaid.Transaction.PaymentMeta.prototype.getPaymentProcessor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.plaid.Transaction.PaymentMeta.prototype.setPaymentProcessor = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string ppdid = 6;
 * @return {string}
 */
proto.plaid.Transaction.PaymentMeta.prototype.getPpdid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.plaid.Transaction.PaymentMeta.prototype.setPpdid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string reason = 7;
 * @return {string}
 */
proto.plaid.Transaction.PaymentMeta.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.plaid.Transaction.PaymentMeta.prototype.setReason = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string reference_number = 8;
 * @return {string}
 */
proto.plaid.Transaction.PaymentMeta.prototype.getReferenceNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.plaid.Transaction.PaymentMeta.prototype.setReferenceNumber = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.plaid.Transaction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.plaid.Transaction.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.plaid.Transaction.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.plaid.Transaction.prototype.setAccountId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string category = 3;
 * @return {!Array<string>}
 */
proto.plaid.Transaction.prototype.getCategoryList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.plaid.Transaction.prototype.setCategoryList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.plaid.Transaction.prototype.addCategory = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.plaid.Transaction.prototype.clearCategoryList = function() {
  this.setCategoryList([]);
};


/**
 * optional string category_id = 4;
 * @return {string}
 */
proto.plaid.Transaction.prototype.getCategoryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.plaid.Transaction.prototype.setCategoryId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional Type type = 5;
 * @return {!proto.plaid.Transaction.Type}
 */
proto.plaid.Transaction.prototype.getType = function() {
  return /** @type {!proto.plaid.Transaction.Type} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.plaid.Transaction.Type} value */
proto.plaid.Transaction.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string merchant_name = 6;
 * @return {string}
 */
proto.plaid.Transaction.prototype.getMerchantName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.plaid.Transaction.prototype.setMerchantName = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double amount = 7;
 * @return {number}
 */
proto.plaid.Transaction.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.plaid.Transaction.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional Currency currency_type = 8;
 * @return {!proto.plaid.Transaction.Currency}
 */
proto.plaid.Transaction.prototype.getCurrencyType = function() {
  return /** @type {!proto.plaid.Transaction.Currency} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.plaid.Transaction.Currency} value */
proto.plaid.Transaction.prototype.setCurrencyType = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string date = 9;
 * @return {string}
 */
proto.plaid.Transaction.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.plaid.Transaction.prototype.setDate = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional Location location = 10;
 * @return {?proto.plaid.Transaction.Location}
 */
proto.plaid.Transaction.prototype.getLocation = function() {
  return /** @type{?proto.plaid.Transaction.Location} */ (
    jspb.Message.getWrapperField(this, proto.plaid.Transaction.Location, 10));
};


/** @param {?proto.plaid.Transaction.Location|undefined} value */
proto.plaid.Transaction.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.plaid.Transaction.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.plaid.Transaction.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PaymentMeta payment_meta = 11;
 * @return {?proto.plaid.Transaction.PaymentMeta}
 */
proto.plaid.Transaction.prototype.getPaymentMeta = function() {
  return /** @type{?proto.plaid.Transaction.PaymentMeta} */ (
    jspb.Message.getWrapperField(this, proto.plaid.Transaction.PaymentMeta, 11));
};


/** @param {?proto.plaid.Transaction.PaymentMeta|undefined} value */
proto.plaid.Transaction.prototype.setPaymentMeta = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.plaid.Transaction.prototype.clearPaymentMeta = function() {
  this.setPaymentMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.plaid.Transaction.prototype.hasPaymentMeta = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool pending = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.plaid.Transaction.prototype.getPending = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.plaid.Transaction.prototype.setPending = function(value) {
  jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional string pending_transaction_id = 13;
 * @return {string}
 */
proto.plaid.Transaction.prototype.getPendingTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.plaid.Transaction.prototype.setPendingTransactionId = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plaid.GetTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plaid.GetTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.plaid.GetTransactionsRequest.displayName = 'proto.plaid.GetTransactionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plaid.GetTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plaid.GetTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plaid.GetTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.GetTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plaid.GetTransactionsRequest}
 */
proto.plaid.GetTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plaid.GetTransactionsRequest;
  return proto.plaid.GetTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plaid.GetTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plaid.GetTransactionsRequest}
 */
proto.plaid.GetTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plaid.GetTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plaid.GetTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plaid.GetTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.GetTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plaid.GetTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plaid.GetTransactionsResponse.repeatedFields_, null);
};
goog.inherits(proto.plaid.GetTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.plaid.GetTransactionsResponse.displayName = 'proto.plaid.GetTransactionsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plaid.GetTransactionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plaid.GetTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plaid.GetTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plaid.GetTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.GetTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.plaid.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plaid.GetTransactionsResponse}
 */
proto.plaid.GetTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plaid.GetTransactionsResponse;
  return proto.plaid.GetTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plaid.GetTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plaid.GetTransactionsResponse}
 */
proto.plaid.GetTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plaid.Transaction;
      reader.readMessage(value,proto.plaid.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plaid.GetTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plaid.GetTransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plaid.GetTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plaid.GetTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plaid.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Transaction transactions = 1;
 * @return {!Array<!proto.plaid.Transaction>}
 */
proto.plaid.GetTransactionsResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.plaid.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plaid.Transaction, 1));
};


/** @param {!Array<!proto.plaid.Transaction>} value */
proto.plaid.GetTransactionsResponse.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plaid.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plaid.Transaction}
 */
proto.plaid.GetTransactionsResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plaid.Transaction, opt_index);
};


proto.plaid.GetTransactionsResponse.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


goog.object.extend(exports, proto.plaid);
